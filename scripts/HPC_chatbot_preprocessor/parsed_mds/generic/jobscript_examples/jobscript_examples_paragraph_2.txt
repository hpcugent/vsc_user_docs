1.  Using #PBS header lines, we specify the resource requirements for
    the job, see Apendix B for a list of these options.
2.  A module for Python 3.6 is loaded, see also section Modules.
3.  We stage the data in: the file input.txt is copied into the
    "working" directory, see chapter Running jobs with input/output data.
4.  The main part of the script runs a small Python program that counts
    the number of characters in the provided input file input.txt.
5.  We stage the results out: the output file output.txt is copied
    from the "working directory" ($TMPDIR|) to a unique directory in
    $VSC_DATA. For a list of possible storage locations, see subsection  Pre-defined user directories.
Multi-core job
Here's an example of a multi-core job script that uses mympirun:
#!/bin/bash
#PBS -N mpi_hello             ## job name
#PBS -l nodes=2:ppn=all       ## 2 nodes, all cores per node
#PBS -l walltime=2:00:00      ## max. 2h of wall time
module load intel/2017b
module load vsc-mympirun      ## We don't use a version here, this is on purpose
# go to working directory, compile and run MPI hello world
cd $PBS_O_WORKDIR
mpicc mpi_hello.c -o mpi_hello
mympirun ./mpi_hello
An example MPI hello world program can be downloaded from
https://github.com/hpcugent/vsc-mympirun/blob/master/testscripts/mpi_helloworld.c.
Running a command with a maximum time limit
If you want to run a job, but you are not sure it will finish before the
job runs out of walltime and you want to copy data back before, you have
to stop the main command before the walltime runs out and copy the data
back.
This can be done with the timeout command. This command sets a limit
of time a program can run for, and when this limit is exceeded, it kills
the program. Here's an example job script using timeout:
#!/bin/bash
#PBS -N timeout_example
#PBS -l nodes=1:ppn=1        ## single-node job, single core
#PBS -l walltime=2:00:00     ## max. 2h of wall time
# go to temporary working directory (on local disk)
cd $TMPDIR
# This command will take too long (1400 minutes is longer than our walltime)
# $PBS_O_WORKDIR/example_program.sh 1400 output.txt
# So we put it after a timeout command
# We have a total of 120 minutes (2 x 60) and we instruct the script to run for
# 100 minutes, but timeout after 90 minute,
# so we have 30 minutes left to copy files back. This should
#  be more than enough.
timeout -s SIGKILL 90m $PBS_O_WORKDIR/example_program.sh 100 output.txt
# copy back output data, ensure unique filename using $PBS_JOBID
cp output.txt $VSC_DATA/output_${PBS_JOBID}.txt
